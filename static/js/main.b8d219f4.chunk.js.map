{"version":3,"sources":["Utils/gameUtils.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Card","Object","classCallCheck","this","symbols","Set","symbol","add","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","utils","createGame","i","j","k","cards","Card1","n","addSymbol","push","Card2","Card3","findMatch","a","b","toConsumableArray","filter","x","has","iconPath","process","Game","props","_this","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","nextProps","nextState","activeGame","loseALife","setState","currentLives","state","handleNewGame","handleSymbolClick","currentCard","currentDeck","shift","updateScore","currentScore","deck","componentWillMount","currentGameCard","_this2","lives","react_default","createElement","key","className","alt","src","concat","map","index","randomAngle","value","onClick","style","transform","Component","App","countdownApi","setRef","countdown","getApi","currentHiScore","gameEndingtext","pause","startNewGame","timerDate","Date","now","start","score","index_es","date","autoStart","renderer","_ref","minutes","seconds","zeroPad","ref","onComplete","Components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8d219f4.chunk.js","sourcesContent":["//Class expression for a single card object that contains multiple symbols\r\nclass Card {\r\n  constructor() {\r\n    this.symbols = new Set()\r\n  }\r\n\r\n  addSymbol(symbol) {\r\n    this.symbols.add(symbol)\r\n  }\r\n}\r\n\r\n\r\n//Creates a deck of 57 cards with 8 symbols\r\nfunction createGame() {\r\n  var i, j, k\r\n  var r=1\r\n  var n=7\r\n\r\n  let cards = []\r\n\r\n  let Card1 = new Card();\r\n  for (i = 1; i<= n+1; i++) {\r\n      Card1.addSymbol(i)\r\n  }\r\n  cards.push(Card1)\r\n\r\n\r\n  for (j=1; j<=n; j++)  {\r\n     r=r+1\r\n     let Card2 = new Card()\r\n     Card2.addSymbol(1)\r\n     for (k=1; k<=n; k++) {\r\n       Card2.addSymbol((n + n * (j-1) + k+1))\r\n     }\r\n     cards.push(Card2)\r\n  }\r\n\r\n  for (i= 1; i<=n; i++) {\r\n     for (j=1; j<=n; j++) {\r\n       let Card3 = new Card()\r\n       Card3.addSymbol(i+1)\r\n        for (k=1; k<= n; k++) {\r\n          Card3.addSymbol(n + 2 + n * (k-1) + (((i-1) * (k-1) +j-1) % n))\r\n        }\r\n        cards.push(Card3)\r\n      }\r\n  }\r\n\r\n  return shuffle(cards);\r\n}\r\n\r\n//Shuffles a deck of cards\r\nfunction shuffle(array) {\r\n  var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n  while (0 !== currentIndex) {\r\n\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n//Finds the matching symbol between two cards\r\nfunction findMatch(a, b) {\r\n  let intersection =\r\n      [...a.symbols].filter(x => b.symbols.has(x));\r\n  return intersection;\r\n}\r\n\r\nconst utils = {\r\n  createGame,\r\n  shuffle,\r\n  findMatch\r\n};\r\n\r\nexport default utils;\r\n","import React, { Component } from 'react';\r\nimport '../Styles/root.css';\r\nimport utils from '../Utils/gameUtils.js';\r\nconst iconPath = process.env.PUBLIC_URL + '/assets/images/';\r\n\r\nclass Game extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      currentCard: \"\",\r\n      currentGameCard: \"\",\r\n      currentDeck: [],\r\n      currentLives: 3,\r\n    }\r\n  }\r\n\r\n  //Check to see if a new game has been started\r\n  componentDidUpdate = (nextProps, nextState) => {\r\n    //If the parent component's activeGame state has changed from false to true\r\n    if ((!this.props.activeGame) && (nextProps.activeGame)) {\r\n      //then create a new game\r\n      this.createGame();\r\n    }\r\n  }\r\n\r\n  //Subtract a life when a user clicks a symbol that isn't a match\r\n  loseALife = () => {\r\n    this.setState({\r\n      currentLives: this.state.currentLives - 1\r\n    }, () => {\r\n      if (this.state.currentLives == 0) {\r\n        this.props.handleNewGame()\r\n      }\r\n    })\r\n  }\r\n\r\n  //Function to be called every time the user clicks on a symbol\r\n  handleSymbolClick = (symbol) => {\r\n\r\n    //Check if the symbol is the correct match\r\n    let match = utils.findMatch(this.state.currentCard, this.state.currentDeck[0])\r\n    if (symbol == match) {\r\n      this.setState({\r\n        currentCard: this.state.currentDeck.shift()\r\n      }, () => {\r\n        this.props.updateScore(this.props.currentScore + 1)\r\n        if (this.state.currentDeck.length == 1) {\r\n          this.props.handleNewGame(this.props.currentScore);\r\n        }\r\n      })\r\n    } else {\r\n      this.setState({\r\n        currentCard: this.state.currentDeck.shift()\r\n      }, () => {\r\n        if (this.state.currentDeck.length == 1) {\r\n          this.props.handleNewGame(this.props.currentScore);\r\n        }\r\n        this.loseALife()\r\n      })\r\n    }\r\n  }\r\n\r\n  //Creates a new deck of shuffled cards and resets the user's lives to 3\r\n  createGame = () => {\r\n    let deck = utils.createGame(); //create a new deck of cards\r\n    let currentCard = deck.shift(); //take the first card from the deck\r\n\r\n    this.props.updateScore(0);\r\n    this.setState({\r\n      currentCard: currentCard,\r\n      currentDeck: deck,\r\n      currentLives: 3\r\n    })\r\n  }\r\n\r\n  //Create a new game so that cards can be rendered and displayed\r\n  componentWillMount = () => {\r\n    this.createGame();\r\n  }\r\n\r\n  render() {\r\n    let lives = [];\r\n    for (var i = 0; i < this.state.currentLives; i++) {\r\n      lives.push(<div key={i} className='heartIcon'><img alt=\"life\" src={`${iconPath}heart.png`}></img></div>);\r\n    }\r\n\r\n    return (\r\n      <div className=\"gameContainer\">\r\n        <div className=\"cardsContainer\">\r\n          <div className=\"card card-player\">\r\n            {utils.shuffle([...this.state.currentCard.symbols]).map((symbol, index) => {\r\n              let randomAngle = (Math.floor(Math.random() * 90 + 1) - 45);\r\n              return <div\r\n                key={index}\r\n                value={symbol}\r\n                onClick={() => this.handleSymbolClick(symbol)}\r\n                className=\"symbol symbol-player\">\r\n                  <img alt=\"symbol\" style={{transform: `rotate(${randomAngle}deg)`}} src={`${iconPath}${symbol}.png`} />\r\n                </div>\r\n            })}\r\n          </div>\r\n          <div className=\"card\">\r\n            {utils.shuffle([...this.state.currentDeck[0].symbols]).map((symbol, index) => {\r\n              let randomAngle = (Math.floor(Math.random() * 90 + 1) - 45);\r\n              return <div\r\n                key={index}\r\n                className=\"symbol\">\r\n                  <img alt=\"symbol\" style={{transform: `rotate(${randomAngle}deg)`}} src={`${iconPath}${symbol}.png`} />\r\n                </div>\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"interactiveContainer\">\r\n          <div className=\"optionsContainer\">\r\n            <div className=\"optionsButton\" onClick={() => this.props.handleNewGame(this.props.currentScore)}>New Game</div>\r\n          </div>\r\n          <div className=\"scoreContainer\">Score: {this.props.currentScore}</div>\r\n          <div className=\"livesContainer\">\r\n            <div className=\"livesTextContainer\">Lives: </div>\r\n            <div className=\"heartsContainer\">\r\n              {lives}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, {Component} from 'react';\nimport Game from './Components/Game.js';\nimport './Styles/root.css';\nimport Countdown, { CountdownApi, zeroPad } from 'react-countdown-now';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      activeGame: false,\n      currentScore: 0,\n      currentHiScore: 0,\n      timerDate: Date.now() + 180000,\n      gameEndingtext: \"Click the symbol on the left card that matches with a symbol on the right card!\"\n    }\n  }\n\n  countdownApi: CountdownApi | null = null;\n\n  setRef = (countdown: Countdown | null): void => {\n    if (countdown) {\n      this.countdownApi = countdown.getApi();\n    }\n  };\n\n  //Function to be called when the current game session is ended\n  handleNewGame = () => {\n    if (this.state.currentScore > this.state.currentHiScore) {\n      this.setState({\n        currentHiScore: this.state.currentScore,\n        activeGame: false,\n        gameEndingtext: `You scored ${this.state.currentScore} points and got a new HiScore!`,\n      }, () => {\n        this.countdownApi.pause();\n      })\n    } else {\n        this.setState({\n          activeGame: false,\n          gameEndingtext: `You scored ${this.state.currentScore} points!`,\n        }, () => {\n          this.countdownApi.pause();\n        })\n      }\n  }\n\n  //Function to handle creating a new game\n  startNewGame = () => {\n    //Game component is updated when changing activeGame state to true\n    this.setState({\n      activeGame: true,\n      timerDate: Date.now() + 180000\n    }, () => {\n      this.countdownApi.start();\n    })\n  }\n\n  //Change score upon finding a successful matching symbol\n  updateScore = (score) => {\n    this.setState({\n      currentScore: score\n    })\n  }\n\n\n  render() {\n    const renderer = ({ minutes, seconds }) => {\n      return <div>Time Left: {zeroPad(minutes, 2)}:{zeroPad(seconds, 2)}</div>;\n    };\n\n    return (\n      <div className=\"appFrame\">\n        <div className=\"headerContainer\">\n          <div className=\"timerContainer\">\n            <Countdown\n              key={this.state.timerDate}\n              date={this.state.timerDate}\n              autoStart={false}\n              renderer={renderer}\n              ref={this.setRef}\n              onComplete={this.handleNewGame}\n            >\n            </Countdown>\n          </div>\n          <div className=\"titleContainer\">Spot the match!</div>\n          <div className=\"hiscoreContainer\">HiScore: {this.state.currentHiScore}</div>\n        </div>\n        {this.state.activeGame ? <Game\n          currentHiScore={this.state.currentHiScore}\n          handleNewGame={this.handleNewGame}\n          activeGame={this.state.activeGame}\n          currentScore={this.state.currentScore}\n          updateScore={this.updateScore}\n        >\n        </Game> : <div className=\"gameInfoContainer\">\n          <div className=\"gameInfoTextContainer\">{this.state.gameEndingtext}</div>\n          <div onClick={() => this.startNewGame()} className=\"gameInfoButton\">New Game</div>\n        </div> }\n\n\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}